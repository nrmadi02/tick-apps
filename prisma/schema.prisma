// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id                     Int       @id @default(autoincrement())
    uuid                   String?   @unique @default(uuid())
    username               String    @unique
    password               String
    email                  String    @unique
    phone                  String?
    verifiedAt             DateTime?
    emailVerificationToken String?   @unique
    role                   Role      @relation(fields: [roleId], references: [id])
    roleId                 String
    createdAt              DateTime  @default(now())
    updatedAt              DateTime  @updatedAt
    cart                   Cart?
    order                  Order[]

    @@map("users")
}

model Role {
    id          String       @id @default(uuid())
    name        String       @unique
    description String?
    permissions Permission[] @relation("RolePermissions")
    users       User[]

    @@map("roles")
}

model Permission {
    id          String     @id @default(uuid())
    action      ActionType
    subject     Subject    @relation(fields: [subjectId], references: [id])
    subjectId   String
    description String?
    roles       Role[]     @relation("RolePermissions")

    @@unique([action, subjectId])
    @@map("permissions")
}

model Subject {
    id          String       @id @default(uuid())
    name        String       @unique
    description String?
    permissions Permission[]

    @@map("subjects")
}

model Event {
    id          String      @id @default(uuid())
    name        String
    description String?
    startDate   DateTime
    endDate     DateTime
    venue       String
    address     String
    city        String
    province    String
    country     String      @default("Indonesia")
    postalCode  String?
    coordinates Json?
    status      EventStatus @default(DRAFT)
    categories  Json        @default("[]")
    tickets     Ticket[]
    cartItems   CartItem[]
    thumbnail   String?
    banner      String?
    poster      String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Cart {
    id        String     @id @default(uuid())
    userId    Int        @unique
    user      User       @relation(fields: [userId], references: [id])
    items     CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model CartItem {
    id        String   @id @default(uuid())
    cartId    String
    cart      Cart     @relation(fields: [cartId], references: [id])
    eventId   String
    event     Event    @relation(fields: [eventId], references: [id])
    category  Json
    quantity  Int      @default(1)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([cartId, eventId])
}

model Ticket {
    id        String       @id @default(uuid())
    eventId   String
    event     Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
    category  Json
    status    TicketStatus @default(AVAILABLE)
    orders    Order[]
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

model Order {
    id            String      @id @default(uuid())
    userId        Int
    user          User        @relation(fields: [userId], references: [id])
    tickets       Ticket[]
    status        OrderStatus @default(PENDING)
    total         Float
    ticketDetails Json?
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    Payment       Payment?
}

model Payment {
    id            String        @id @default(uuid())
    orderId       String        @unique
    order         Order         @relation(fields: [orderId], references: [id])
    amount        Float
    paymentMethod PaymentMethod // Menggunakan enum untuk payment method
    provider      String        @default("midtrans")

    // Midtrans specific fields
    transactionId     String?       @unique // Midtrans transaction ID
    transactionTime   DateTime?
    transactionStatus PaymentStatus @default(PENDING)
    paymentType       String? // Specific payment type from Midtrans (e.g. "bank_transfer", "gopay")

    // Payment details
    vaNumber    String? // Virtual Account number
    bank        String? // Bank name for VA/Transfer
    expiryTime  DateTime? // Payment expiry time
    paymentLink String? // Payment URL from Midtrans

    // Response fields
    responseTime DateTime? // When we receive response from Midtrans
    responseData Json? // Raw response from Midtrans
    settlement   Json? // Settlement data

    // Status tracking
    statusHistory Json? // Array of status changes with timestamps
    failureReason String? // Reason if payment fails
    refundAmount  Float? // Amount refunded (if applicable)

    // Metadata
    metadata  Json? // Additional payment details
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("payments")
}

enum PaymentMethod {
    BANK_TRANSFER
    E_WALLET
    CREDIT_CARD
    RETAIL
    PAYLATER
}

enum PaymentStatus {
    PENDING // Initial status
    SETTLEMENT // Payment successful and settled
    CAPTURE // For credit card, funds captured
    DENY // Payment denied
    CANCEL // Payment cancelled
    EXPIRE // Payment expired
    FAILURE // Payment failed
    REFUND // Fully refunded
    PARTIAL_REFUND // Partially refunded
    CHARGEBACK // Full chargeback
    PARTIAL_CHARGEBACK // Partial chargeback
    AUTHORIZE // For credit card, funds authorized
}

enum EventStatus {
    DRAFT
    PUBLISHED
    CANCELLED
}

enum OrderStatus {
    PENDING
    PAID
    CANCELLED
    REFUNDED
}

enum TicketStatus {
    AVAILABLE
    SOLD
    USED
    CANCELLED
}

enum ActionType {
    manage
    create
    read
    update
    delete
}
